generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  role      UserRole
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Admin?
}

model Admin {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String   @unique
  image         String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique @db.ObjectId
}

model Service {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String        @unique
  description String
  image       String?
  questions   Question[]
  appointment Appointment[]
}

model Question {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  serviceId  String     @db.ObjectId
  question   String
  answerType AnswerType
  option     Option[]
  service    Service    @relation(fields: [serviceId], references: [id])
  answers    Answer[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  isDeleted  Boolean    @default(false)
}

model Option {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  questionId String   @db.ObjectId
  label      String
  question   Question @relation(fields: [questionId], references: [id])
  answers    Answer[]
}

model Answer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  questionId String   @db.ObjectId
  textAnswer String? 
  optionId   String?  @db.ObjectId 
  question   Question @relation(fields: [questionId], references: [id])
  option     Option?  @relation(fields: [optionId], references: [id])
}

model Appointment {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  phone     String?
  address   String
  note      String?
  image     String[]
  status    AppointmentStatus
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  form      Form[]
  serviceId String?           @db.ObjectId
  service   Service?          @relation(fields: [serviceId], references: [id])
  diary     Diary[]
}

model Form {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  question      String
  answer        String
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  appointmentId String?      @db.ObjectId
}

model Testimonial {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  serviceName String
  address     String
  rating      Int
  comment     String
  date        String
  image       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Diary {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  appointmentId String            @db.ObjectId
  status        AppointmentStatus
  medicine      String?
  newDate       DateTime?
  note          String?
  createdAt     DateTime          @default(now())
  
  updatedAt     DateTime          @updatedAt
  appointment   Appointment       @relation(fields: [appointmentId], references: [id])
}

model Review {
   id            String            @id @default(auto()) @map("_id") @db.ObjectId
   name          String
   image         String?
   text          String
   rating        String

}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AnswerType {
  TEXT
  DROPDOWN
  CHECKBOX
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum UserRole {
  SUPERADMIN
  ADMIN
}
